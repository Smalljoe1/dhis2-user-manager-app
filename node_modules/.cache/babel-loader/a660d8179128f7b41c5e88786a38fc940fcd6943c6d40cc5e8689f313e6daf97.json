{"ast":null,"code":"import Papa from 'papaparse';\nexport const convertCSVtoJSON = csvData => {\n  try {\n    const result = Papa.parse(csvData, {\n      header: true,\n      skipEmptyLines: true\n    });\n    if (!result.data.length) throw new Error('No data rows found');\n    return result.data.map(row => ({\n      firstName: row.firstName || '',\n      surname: row.surname || '',\n      username: Number(row.username) || row.username,\n      password: row.password || '',\n      userRoles: row.userRoles ? JSON.parse(row.userRoles) : [],\n      organisationUnits: row.organisationUnits ? JSON.parse(row.organisationUnits) : [],\n      dataViewOrganisationUnits: row.dataViewOrganisationUnits ? JSON.parse(row.dataViewOrganisationUnits) : [],\n      teiSearchOrganisationUnits: row.teiSearchOrganisationUnits ? JSON.parse(row.teiSearchOrganisationUnits) : [],\n      userGroups: row.userGroups ? JSON.parse(row.userGroups) : []\n    }));\n  } catch (error) {\n    console.error('CSV parsing failed:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["Papa","convertCSVtoJSON","csvData","result","parse","header","skipEmptyLines","data","length","Error","map","row","firstName","surname","username","Number","password","userRoles","JSON","organisationUnits","dataViewOrganisationUnits","teiSearchOrganisationUnits","userGroups","error","console"],"sources":["C:/Users/nongu/Documents/Projects/dhis2-user-manager/src/convertCSVtoJSON.js"],"sourcesContent":["import Papa from 'papaparse';\n\nexport const convertCSVtoJSON = (csvData) => {\n  try {\n    const result = Papa.parse(csvData, { header: true, skipEmptyLines: true });\n    if (!result.data.length) throw new Error('No data rows found');\n    return result.data.map(row => ({\n      firstName: row.firstName || '',\n      surname: row.surname || '',\n      username: Number(row.username) || row.username,\n      password: row.password || '',\n      userRoles: row.userRoles ? JSON.parse(row.userRoles) : [],\n      organisationUnits: row.organisationUnits ? JSON.parse(row.organisationUnits) : [],\n      dataViewOrganisationUnits: row.dataViewOrganisationUnits ? JSON.parse(row.dataViewOrganisationUnits) : [],\n      teiSearchOrganisationUnits: row.teiSearchOrganisationUnits ? JSON.parse(row.teiSearchOrganisationUnits) : [],\n      userGroups: row.userGroups ? JSON.parse(row.userGroups) : [],\n    }));\n  } catch (error) {\n    console.error('CSV parsing failed:', error);\n    return null;\n  }\n};"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAE5B,OAAO,MAAMC,gBAAgB,GAAIC,OAAO,IAAK;EAC3C,IAAI;IACF,MAAMC,MAAM,GAAGH,IAAI,CAACI,KAAK,CAACF,OAAO,EAAE;MAAEG,MAAM,EAAE,IAAI;MAAEC,cAAc,EAAE;IAAK,CAAC,CAAC;IAC1E,IAAI,CAACH,MAAM,CAACI,IAAI,CAACC,MAAM,EAAE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IAC9D,OAAON,MAAM,CAACI,IAAI,CAACG,GAAG,CAACC,GAAG,KAAK;MAC7BC,SAAS,EAAED,GAAG,CAACC,SAAS,IAAI,EAAE;MAC9BC,OAAO,EAAEF,GAAG,CAACE,OAAO,IAAI,EAAE;MAC1BC,QAAQ,EAAEC,MAAM,CAACJ,GAAG,CAACG,QAAQ,CAAC,IAAIH,GAAG,CAACG,QAAQ;MAC9CE,QAAQ,EAAEL,GAAG,CAACK,QAAQ,IAAI,EAAE;MAC5BC,SAAS,EAAEN,GAAG,CAACM,SAAS,GAAGC,IAAI,CAACd,KAAK,CAACO,GAAG,CAACM,SAAS,CAAC,GAAG,EAAE;MACzDE,iBAAiB,EAAER,GAAG,CAACQ,iBAAiB,GAAGD,IAAI,CAACd,KAAK,CAACO,GAAG,CAACQ,iBAAiB,CAAC,GAAG,EAAE;MACjFC,yBAAyB,EAAET,GAAG,CAACS,yBAAyB,GAAGF,IAAI,CAACd,KAAK,CAACO,GAAG,CAACS,yBAAyB,CAAC,GAAG,EAAE;MACzGC,0BAA0B,EAAEV,GAAG,CAACU,0BAA0B,GAAGH,IAAI,CAACd,KAAK,CAACO,GAAG,CAACU,0BAA0B,CAAC,GAAG,EAAE;MAC5GC,UAAU,EAAEX,GAAG,CAACW,UAAU,GAAGJ,IAAI,CAACd,KAAK,CAACO,GAAG,CAACW,UAAU,CAAC,GAAG;IAC5D,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}